/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CompoundLoanInterface extends ethers.utils.Interface {
  functions: {
    "borrowAsset(address,uint256)": FunctionFragment;
    "comptroller()": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "getContractCTokenBalance(address)": FunctionFragment;
    "liquidate(address,address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractCTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;

  events: {};
}

export class CompoundLoan extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CompoundLoanInterface;

  functions: {
    borrowAsset(
      _cToken: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    enterMarkets(
      _cTokens: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContractCTokenBalance(
      _cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      _borrower: string,
      _cTokenRepay: string,
      _repayAmount: BigNumberish,
      _cTokenCollateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowAsset(
    _cToken: string,
    _borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  enterMarkets(
    _cTokens: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContractCTokenBalance(
    _cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    _borrower: string,
    _cTokenRepay: string,
    _repayAmount: BigNumberish,
    _cTokenCollateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowAsset(
      _cToken: string,
      _borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    enterMarkets(_cTokens: string[], overrides?: CallOverrides): Promise<void>;

    getContractCTokenBalance(
      _cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _borrower: string,
      _cTokenRepay: string,
      _repayAmount: BigNumberish,
      _cTokenCollateral: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrowAsset(
      _cToken: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      _cTokens: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContractCTokenBalance(
      _cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _borrower: string,
      _cTokenRepay: string,
      _repayAmount: BigNumberish,
      _cTokenCollateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowAsset(
      _cToken: string,
      _borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      _cTokens: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContractCTokenBalance(
      _cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _borrower: string,
      _cTokenRepay: string,
      _repayAmount: BigNumberish,
      _cTokenCollateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
