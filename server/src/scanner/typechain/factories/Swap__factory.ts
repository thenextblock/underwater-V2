/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Swap, SwapInterface } from "../Swap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_uniswapRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
    ],
    name: "startArbitrage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapRouter",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "uniswapV2Call",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516113623803806113628339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b031991821617909155600180549390921692169190911790556112e88061007a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806310d1e85c14610051578063735de9f7146100df57806376e9d06614610103578063c45a01551461013f575b600080fd5b6100dd6004803603608081101561006757600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561009e57600080fd5b8201836020820111156100b057600080fd5b803590602001918460018302840111640100000000831117156100d257600080fd5b509092509050610147565b005b6100e761065c565b604080516001600160a01b039092168252519081900360200190f35b6100dd6004803603608081101561011957600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561066b565b6100e761098b565b6040805160028082526060808301845292602083019080368337019050509050600085156101755785610177565b845b90506000336001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b457600080fd5b505afa1580156101c8573d6000803e3d6000fd5b505050506040513d60208110156101de57600080fd5b50516040805163d21220a760e01b81529051919250600091339163d21220a7916004808301926020929190829003018186803b15801561021d57600080fd5b505afa158015610231573d6000803e3d6000fd5b505050506040513d602081101561024757600080fd5b5051604080518082019091526015815274029a696969f1010233ab732399030b93934bb32b21605d1b60208201529091506102819061099a565b6102b26040518060400160405280600f81526020016e534d2d2d3e20746f6b656e3020257360881b81525083610a43565b6102e36040518060400160405280600f81526020016e534d2d2d3e20746f6b656e3120257360881b81525082610a43565b6040805180820182526016815275029a696969f102a37b5b2b7102130b630b731b2901d160551b60208083019190915282516370a0823160e01b815230600482015292516103f9936001600160a01b038716926370a0823192602480840193829003018186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d602081101561038057600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b038616916370a08231916024808301926020929190829003018186803b1580156103c857600080fd5b505afa1580156103dc573d6000803e3d6000fd5b505050506040513d60208110156103f257600080fd5b5051610afe565b61042e60405180604001604052806013815260200172534d2d2d3e206d73672e73656e64657220257360681b81525033610a43565b60008054610446906001600160a01b03168484610bb9565b905061047b60405180604001604052806011815260200170534d2d2d3e2070616972466f723a20257360781b81525082610a43565b600054610492906001600160a01b03168484610bb9565b6001600160a01b0316336001600160a01b0316146104e6576040805162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015290519081900360640190fd5b8815806104f1575087155b6104fa57600080fd5b88156105065782610508565b815b8560008151811061051557fe5b6001600160a01b03909216602092830291909101909101528815610539578161053b565b825b8560018151811061054857fe5b6001600160a01b03909216602092830291909101909101526000891561056e5783610570565b825b6001546040805163095ea7b360e01b81526001600160a01b0392831660048201526024810189905290519293509083169163095ea7b3916044808201926020929091908290030181600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b505050506040513d60208110156105f357600080fd5b50506000805461060d906001600160a01b03168789610c79565b60008151811061061957fe5b6020026020010151905061064e60405180604001604052806009815260200168029a6969f1f1012b9960bd1b81525082610dc6565b505050505050505050505050565b6001546001600160a01b031681565b6040805180820182526008815267029a6969f1012b9960c51b602080830191909152600154835163c45a015560e01b81529351610700946001600160a01b039092169263c45a01559260048082019391829003018186803b1580156106cf57600080fd5b505afa1580156106e3573d6000803e3d6000fd5b505050506040513d60208110156106f957600080fd5b5051610a43565b6001546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b15801561074557600080fd5b505afa158015610759573d6000803e3d6000fd5b505050506040513d602081101561076f57600080fd5b50516040805163e6a4390560e01b81526001600160a01b038881166004830152878116602483015291519293506000929184169163e6a4390591604480820192602092909190829003018186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d60208110156107f357600080fd5b5051604080518082019091526014815273534d2d3e2050616972206164647265737320257360601b602082015290915061082d9082610a43565b6001600160a01b038116610888576040805162461bcd60e51b815260206004820152601860248201527f5468697320706f6f6c20646f6573206e6f742065786973740000000000000000604482015290519081900360640190fd5b60408051808201825260098152686e6f7420656d70747960b81b60208201908152915163022c0d9f60e01b8152600481018781526024820187905230604483018190526080606484019081528451608485015284516001600160a01b0388169663022c0d9f968c968c9691949193919260a49091019180838360005b8381101561091c578181015183820152602001610904565b50505050905090810190601f1680156109495780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031681565b610a40816040516024018080602001828103825283818151815260200191508051906020019080838360005b838110156109de5781810151838201526020016109c6565b50505050905090810190601f168015610a0b5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790529250610e74915050565b50565b604080516001600160a01b038316604482015260248101918252835160648201528351610afa9285928592829160840190602086019080838360005b83811015610a97578181015183820152602001610a7f565b50505050905090810190601f168015610ac45780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790529350610e7492505050565b5050565b610bb48383836040516024018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610b50578181015183820152602001610b38565b50505050905090810190601f168015610b7d5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b1790529450610e749350505050565b505050565b6000806000610bc88585610e95565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6060600282511015610cd2576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015290519081900360640190fd5b815167ffffffffffffffff81118015610cea57600080fd5b50604051908082528060200260200182016040528015610d14578160200160208202803683370190505b5090508281600183510381518110610d2857fe5b60209081029190910101528151600019015b8015610dbe57600080610d7787866001860381518110610d5657fe5b6020026020010151878681518110610d6a57fe5b6020026020010151610f73565b91509150610d99848481518110610d8a57fe5b60200260200101518383611041565b846001850381518110610da857fe5b6020908102919091010152505060001901610d3a565b509392505050565b610afa82826040516024018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610e11578181015183820152602001610df9565b50505050905090810190601f168015610e3e5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790529350610e7492505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080826001600160a01b0316846001600160a01b03161415610ee95760405162461bcd60e51b81526004018080602001828103825260258152602001806112666025913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610f09578284610f0c565b83835b90925090506001600160a01b038216610f6c576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b6000806000610f828585610e95565b509050600080610f93888888610bb9565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610fcb57600080fd5b505afa158015610fdf573d6000803e3d6000fd5b505050506040513d6060811015610ff557600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b038781169084161461102f578082611032565b81815b90999098509650505050505050565b60008084116110815760405162461bcd60e51b815260040180806020018281038252602c81526020018061123a602c913960400191505060405180910390fd5b6000831180156110915750600082115b6110cc5760405162461bcd60e51b815260040180806020018281038252602881526020018061128b6028913960400191505060405180910390fd5b60006110f06103e86110e4868863ffffffff61113116565b9063ffffffff61113116565b9050600061110a6103e56110e4868963ffffffff61119a16565b9050611127600182848161111a57fe5b049063ffffffff6111ea16565b9695505050505050565b600081158061114c5750508082028282828161114957fe5b04145b611194576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b92915050565b80820382811115611194576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b80820182811015611194576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fdfe556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459a26469706673582212201c4548b61553f5302d224d48954a65769177a36b081f156c76622509d6ea64bf64736f6c63430006060033";

export class Swap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _factory: string,
    _uniswapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Swap> {
    return super.deploy(
      _factory,
      _uniswapRouter,
      overrides || {}
    ) as Promise<Swap>;
  }
  getDeployTransaction(
    _factory: string,
    _uniswapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factory,
      _uniswapRouter,
      overrides || {}
    );
  }
  attach(address: string): Swap {
    return super.attach(address) as Swap;
  }
  connect(signer: Signer): Swap__factory {
    return super.connect(signer) as Swap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapInterface {
    return new utils.Interface(_abi) as SwapInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Swap {
    return new Contract(address, _abi, signerOrProvider) as Swap;
  }
}
